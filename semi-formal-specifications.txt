
/* Online banking semi formal specifications */

module SYSTEM_ONLINEBANKING;
const

maximum_fundstranfer_day = 10,000;
maximum_utilitybill_payment_day = 1000;

/* The unit is USD. */

update_log = "Transaction log successfully updated"
paid_bill = " Bill Paid Successfully"
/* Predefined transaction log messages */


type

CustomerProfile = composed of
                full_name: CustomerName
                email_address: string
                national_id_num: string
                password: string
                username: string

                end;
CustomerName = string; /* customer full name */

AccountTransactions = composed of
              transfer_date: Date
              transfer_amount: nat0
              transfer_account_num: nat0
              transfer_description: string
              transfer_person: CustomerProfile

              end;


AccountTransfersFile = map CustomerProfile to AccountTransactions

UtilityBillPayments = composed of
                      payment_date: Date
                      bill_name: string
                      bill_amount: nat0
                      customer_name: string
                      utility_bill_account: nat0
                      bill_description: string

                      end;


UtilityBillsCustFile = map CustomerProfile to UtilityBillPayments;

UtilityBillCompany = composed of
                    company_name: string
                    company_accountnum: nat0
                    company_account_bal: nat0;
                    company_account_status: bool /* True for Active, False for Disabled */

                    end;

UtilityBillsCompanyFile = map UtilityBillPayments to UtilityBillCompany


CurrentAccount = composed of
                  account_name: CustomerName
                  account_number: nat0
                  account_balance: nat0 /* The unit is USD */
                  account_created: Date
                  bank_name: string
                  bank_branch: string
                  transaction_history: seq AccountTransactions
                  current_accounts_status: bool /* True for Active, False for Disabled */

                  end;



CurrentAccountFile = map CustomerProfile to CurrentAccount;


Date = Day * Month * Year;
Day = nat0;
Month = nat0;
Year = nat0;

var

ext #customer_details: set of CustomerProfile
ext #current_accounts: set of CurrentAccountFile;
ext #utility_bills_payment_company: seq of UtilityBillsCompanyFile;
ext #utility_bills_payment_customer:seq of UtilityBillsCustFile
ext #account_transfers: seq of AccountTransfersFile;
ext #output_device: seq of String;

inv

forall[x: CurrentAccount ] | not exists [y: CurrentAccount ] | x.account_number = y.account_number;

/* Each customer account is unique */
forall[ x: CustomerProfile ] | not exists [y: CustomerProfile ] |
        x.email_address = y.email_address => x.national_id_num < > y.national_id_num
/* Each customer has a unique email address and national ID number  and each customer profile is unique*/

forall [ x, y: AccountTransactions ] | x < > y;

/* All account transfers are different */

forall[x, y: UtilityBillPayments ] | x < > y;

/* All utility bills payments are different */

forall [x: UtilityBillCompany ] | not exists [y: UtilityBillCompany ]
        | x.company_accountnum = y.company_accountnum => x.company_name <> y.company_name

/* No two companies can have the same utility bills account number as well as same company names */

behave CDFD_2;


process SignUp(customer_info: CustomerProfile) signup_complete:sign
                | error_message: string

ext wr customer_details


post if the inputs customer_info.email_address and customer_info.national_id_num
    match those of a customer profile stored in customer_details
    then output an error message
    else save customer_info in customer_details

end_process;

process SignIn(username: String, password: String) login_success: sign | login_error: String

ext rd current_accounts

pre username and password inputs must exist in current_accounts records

post if provided username and password exist in current_accounts then login user
      else deny user login

end_process;


process FundsTransfer(amount: nat0, sender:CurrentAccountFile, transfer_from_account: CurrentAccount,
                      receiver: CurrentAccountFile, receiver_account: CurrentAccount, transfer_desc: String, transfer_day: Date)
                          funds_sent: string, transaction: AccountTransactions, sender_rc: CurrentAccountFile | ft_error_msg: string
ext wr current_accounts


pre the recipient account should exist and  be active and the requested amount for transfer
    should be lower than current balance of the sender

post if the receiver_account exists and its status is active and current balance of sender account
      is higher than amount to be sent
      then amount is deducted from sender account and added to recipient account
        and current_accounts is updated
      else output an error message

end_process;

process BillPayment( bill: nat0, receiving_company: UtilityBillsCompanyFile,
                    payment_account: UtilityBillCompany, customer_account: CurrentAccount
                    customer: CurrentAccountFile) bill_paid: string | bill_error_msg: string
ext wr current_accounts
ext wr utility_bills_payment_company
ext wr utility_bills_payment_customer

pre the utility bill company account should exist and should be active and bill
      should be less than the current account balance of payee

post if bill_paid signal
        then bill amount is deducted from payee Account and bill amount is
          added to company payment_account initial value; and utility_bills_payment_company
          and utility_bills_payment_customer record files are updated
        else output an error message

end_process;

process CheckBalance( account_num: nat0 ) bal: real | cb_error_msg: string

ext rd current_accounts

pre the provided account_num must exist in the file current_accounts and the account_num must belong to the user

post if the provided account_num exists in the current_accounts records and the account_num belongs to the user
       then show current account balance of user
     else output an error message.

end_process;

process RecordTransfers( transaction: AccountTransactions, sender_rc: CurrentAccountFile, funds_sent: sign)
                        Record_success: string | rt_error_msg: string
ext rd current_accounts
ext wr account_transfers

pre true

post get profile of the sender, map it with the funds transfer executed and record
      the mapping in account_transfers files.


end_process;

process OutputMessage(bill_paid, bill_error_msg, ft_error_msg, bal, cb_error_msg
                      rt_error_msg, Record_success: string)
ext wr output_device

post print bill_paid message or
      print bill_error_msg or
        print ft_error_msg of
          print bal or
            print cb_error_msg or
              rt_error_msg or
                print Record_success
end_process;

end_module;
